// <auto-generated />
using System;
using Assignment1_v3.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Assignment1_v3.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Assignment1_v3.Models.Feedback", b =>
                {
                    b.Property<Guid>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Message")
                        .HasColumnType("int");

                    b.Property<Guid?>("ResolutionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FeedbackId");

                    b.HasIndex("ResolutionId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new
                        {
                            FeedbackId = new Guid("1933c839-6205-4a39-ad2c-8db6a19222cc"),
                            Link = "www.google.ca",
                            Message = 0,
                            ResolutionId = new Guid("7cfcfe6e-8e77-46d6-9ef4-dcc16ec20065"),
                            UserId = "36abd8f9-4a73-49e0-b56e-57187be189e3"
                        },
                        new
                        {
                            FeedbackId = new Guid("df08baa6-0ed4-4706-a9d4-cd99748c1ae8"),
                            Link = "www.apple.ca",
                            Message = 1,
                            ResolutionId = new Guid("a53b5f28-60b5-4d70-991e-a9bd476b8b9b"),
                            UserId = "7a9c7811-25c5-41be-95f9-63343ef85d16"
                        },
                        new
                        {
                            FeedbackId = new Guid("fd913b3a-81f4-4f9e-9877-f0f5b922846e"),
                            Link = "www.microsoft.ca",
                            Message = 0,
                            ResolutionId = new Guid("fb9c5742-2ab8-428a-a281-2c2985c673a1"),
                            UserId = "a5032dce-7ed6-460f-84f5-4d923f28ffde"
                        },
                        new
                        {
                            FeedbackId = new Guid("9b63d1a3-a449-4fd7-ad48-1e5b8685e27f"),
                            Link = "www.amazon.ca",
                            Message = 1,
                            ResolutionId = new Guid("f678a5b4-2be4-4ab1-a708-535e1558472b"),
                            UserId = "9d739ef4-95b5-4874-9218-c4da3feeb5dd"
                        });
                });

            modelBuilder.Entity("Assignment1_v3.Models.Resolution", b =>
                {
                    b.Property<Guid>("ResolutionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("ResolutionAbstract")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ResolutionId");

                    b.HasIndex("UserId");

                    b.ToTable("Resolutions");

                    b.HasData(
                        new
                        {
                            ResolutionId = new Guid("7cfcfe6e-8e77-46d6-9ef4-dcc16ec20065"),
                            ResolutionAbstract = "Abstract1",
                            Status = 0,
                            UserId = "36abd8f9-4a73-49e0-b56e-57187be189e3"
                        },
                        new
                        {
                            ResolutionId = new Guid("a53b5f28-60b5-4d70-991e-a9bd476b8b9b"),
                            ResolutionAbstract = "Abstract2",
                            Status = 1,
                            UserId = "7a9c7811-25c5-41be-95f9-63343ef85d16"
                        },
                        new
                        {
                            ResolutionId = new Guid("fb9c5742-2ab8-428a-a281-2c2985c673a1"),
                            ResolutionAbstract = "Abstract3",
                            Status = 2,
                            UserId = "a5032dce-7ed6-460f-84f5-4d923f28ffde"
                        },
                        new
                        {
                            ResolutionId = new Guid("f678a5b4-2be4-4ab1-a708-535e1558472b"),
                            ResolutionAbstract = "Abstract4",
                            Status = 3,
                            UserId = "9d739ef4-95b5-4874-9218-c4da3feeb5dd"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "4a65288b-cae5-495e-bcf4-f15d9b76d6dd",
                            ConcurrencyStamp = "0735fb30-0e42-4a31-b168-a0875a2df2bf",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "4eb3b282-6f1c-4de8-a9c8-0e65d50c7c0e",
                            ConcurrencyStamp = "4d9e1367-f5ba-4661-b057-110d9193d763",
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "d0006598-08aa-4dc3-9a71-7ace54bca36d",
                            RoleId = "4a65288b-cae5-495e-bcf4-f15d9b76d6dd"
                        },
                        new
                        {
                            UserId = "36abd8f9-4a73-49e0-b56e-57187be189e3",
                            RoleId = "4eb3b282-6f1c-4de8-a9c8-0e65d50c7c0e"
                        },
                        new
                        {
                            UserId = "7a9c7811-25c5-41be-95f9-63343ef85d16",
                            RoleId = "4eb3b282-6f1c-4de8-a9c8-0e65d50c7c0e"
                        },
                        new
                        {
                            UserId = "a5032dce-7ed6-460f-84f5-4d923f28ffde",
                            RoleId = "4eb3b282-6f1c-4de8-a9c8-0e65d50c7c0e"
                        },
                        new
                        {
                            UserId = "9d739ef4-95b5-4874-9218-c4da3feeb5dd",
                            RoleId = "4eb3b282-6f1c-4de8-a9c8-0e65d50c7c0e"
                        },
                        new
                        {
                            UserId = "068d969d-26df-49f2-822d-b217ab5c67dd",
                            RoleId = "4eb3b282-6f1c-4de8-a9c8-0e65d50c7c0e"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Assignment1_v3.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("SignatureGUID")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "d0006598-08aa-4dc3-9a71-7ace54bca36d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "095355bc-2d23-4d63-8565-d3b37cda3adf",
                            Email = "aa@aa.aa",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "AA@AA.AA",
                            PasswordHash = "AQAAAAEAACcQAAAAEEwGIuH+Fe8rfjyhHXTYAVl8IinjVlUr39IRrYPQtzykcGXME7SjPeb/0J/G6qA8TQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7e45f89e-7d83-444d-932a-e49f85b0bcad",
                            TwoFactorEnabled = false,
                            UserName = "aa@aa.aa",
                            FirstName = "Admin",
                            LastName = "Administrator",
                            SignatureGUID = "c284c601-cd56-4a66-a463-ee3861a2b939"
                        },
                        new
                        {
                            Id = "36abd8f9-4a73-49e0-b56e-57187be189e3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "47905e72-a399-4dab-8a33-ee69ffd83fa2",
                            Email = "11@11.11",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "11@11.11",
                            PasswordHash = "AQAAAAEAACcQAAAAEBYsdSMS1Chd81phDvzeISas88x/klMJVJg3QjB4j2eJrYsbrWEH79N2qxcD3OuYLw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b4ac74af-198c-4c8e-937b-3359cb7b5247",
                            TwoFactorEnabled = false,
                            UserName = "11@11.11",
                            FirstName = "Pat",
                            LastName = "John",
                            SignatureGUID = "d7baffd3-d330-410a-91b1-f25f9885cf39"
                        },
                        new
                        {
                            Id = "7a9c7811-25c5-41be-95f9-63343ef85d16",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e55d0316-1db3-48d4-a307-488e100cfe7e",
                            Email = "22@22.22",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "22@22.22",
                            PasswordHash = "AQAAAAEAACcQAAAAEK3A2bbUH/GgAfTNXcUJD5azzFHmn1Oj9goDK+lBBUCTNqZpV69mYDT2XlnOCZeXNg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6bc99793-b7d3-45fb-89a1-9a1b44563d13",
                            TwoFactorEnabled = false,
                            UserName = "22@22.22",
                            FirstName = "Sue",
                            LastName = "Fox",
                            SignatureGUID = "efe2a3aa-4f74-49e1-be9b-bddd9243f6f8"
                        },
                        new
                        {
                            Id = "a5032dce-7ed6-460f-84f5-4d923f28ffde",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2596ee57-7bd4-4ae4-ac06-17dc785a62dd",
                            Email = "33@33.33",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "33@33.33",
                            PasswordHash = "AQAAAAEAACcQAAAAEEGccW7gNQ/bIQXU8My3WQoiYzwzHrpjZsziJA0VN0WFLfhHp/bNve6zu/F3XtwKAw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "efcd0273-2839-45ec-bcd5-81a451dc5d70",
                            TwoFactorEnabled = false,
                            UserName = "33@33.33",
                            FirstName = "Bob",
                            LastName = "Sims",
                            SignatureGUID = "fedea933-357e-4425-9ca0-988c5182fb60"
                        },
                        new
                        {
                            Id = "9d739ef4-95b5-4874-9218-c4da3feeb5dd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ed1424f0-99d3-4f81-8025-23e35332642c",
                            Email = "44@44.44",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "44@44.44",
                            PasswordHash = "AQAAAAEAACcQAAAAEJX+rRZKVQ9BclY5pEdXHjOySbs68IyFvIoDrbgNiguABR177Au2dHNuSGeGYTDo7w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f9d66631-f1a1-44dc-9d92-ce8e0d651622",
                            TwoFactorEnabled = false,
                            UserName = "44@44.44",
                            FirstName = "Eddy",
                            LastName = "Glen",
                            SignatureGUID = "c7a473d4-0a79-43df-8c9a-030b6585e063"
                        },
                        new
                        {
                            Id = "068d969d-26df-49f2-822d-b217ab5c67dd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9377c934-f27e-4467-9f5f-b87e219feeac",
                            Email = "comp4976@outlook.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "COMP4976@OUTLOOK.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOp7nx9kyg7ES99zATRv1ifjjhpgkCI0bjYgm+6IpUEy3iwZsjGvh/Disb8aF6t+pA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ba32b2a9-d643-4b72-bb6e-3f8d6a9b179d",
                            TwoFactorEnabled = false,
                            UserName = "comp4976@outlook.com",
                            FirstName = "Medhat",
                            LastName = "Elmasry",
                            SignatureGUID = "2fbc1c15-14f6-4ef2-a7b7-aebcb6b2eda1"
                        });
                });

            modelBuilder.Entity("Assignment1_v3.Models.Feedback", b =>
                {
                    b.HasOne("Assignment1_v3.Models.Resolution", "Resolution")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ResolutionId");

                    b.HasOne("Assignment1_v3.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Resolution");
                });

            modelBuilder.Entity("Assignment1_v3.Models.Resolution", b =>
                {
                    b.HasOne("Assignment1_v3.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Resolutions")
                        .HasForeignKey("UserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Assignment1_v3.Models.Resolution", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("Assignment1_v3.Models.ApplicationUser", b =>
                {
                    b.Navigation("Resolutions");
                });
#pragma warning restore 612, 618
        }
    }
}
